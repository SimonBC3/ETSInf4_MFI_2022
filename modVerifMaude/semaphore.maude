mod SEMAPHORE is
protecting NAT .
protecting BOOL .

sorts Process PState .

op p_{_} : Nat PState -> Process .

ops idle entering critical exiting : -> PState .

sort PSet .
subsort Process < PSet .
op empty : -> PSet .
op __ : PSet PSet -> PSet [assoc comm id: empty] .
eq X:Process X:Process = X:Process . --- Propiedad idempotencia

sort Semaphore .
subsort Bool < Semaphore .

sort GlobalState .
op _||_ : Semaphore PSet -> GlobalState .

var S : Semaphore . var PS : PSet . var Id : Nat .

rl S || p Id {idle} PS --- El proceso sigue en idle
=> S || p Id {idle} PS .

rl S || p Id {idle} PS --- El proceso pasa a entering
=> S || p Id {entering} PS .

rl false || p Id {entering} PS --- El proceso entra en la zona critica
=> true || p Id {critical} PS .

rl S || p Id {critical} PS --- El proceso sale de la zona critica
=> S || p Id {exiting} PS . --- Solo un proceso estaba en su zona critica

rl S || p Id {exiting} PS 
=> false || p Id {idle} PS .
endm
