MODULE main
VAR
    semaphore : boolean;
    turn1 : boolean;
    turn2 : boolean;
    question1 : process question(semaphore);
    question2 : process question(semaphore);
ASSIGN
    init(semaphore) := FALSE;
    init(turn1) := FALSE;
    init(turn2) := FALSE;
SPEC
    AG !(question1.state = answering & question2.state = answering) ---safety
SPEC
    AG (question1.state = request -> AF question1.state = answering) ---liveness1
SPEC
    AG (question2.state = request -> AF question2.state = answering) ---liveness2

MODULE question(semaphore)
VAR
    state : {noanswer,request,answering,a,b,c,d};
ASSIGN
    init(state) := noanswer;
    next(state) :=
        case
            state = noanswer : {noanswer,request};
            state = request & !semaphore : answering;
            state = answering : {a,b,c,d};
            state = a : {a,request};
            state = b : {b,request};
            state = c : {c,request};
            state = d : {d,request};
            TRUE : state;
    esac;
    next(semaphore) :=
        case    
        state = request & !semaphore : TRUE;
        state = answering : FALSE;
        TRUE : semaphore;
    esac;
FAIRNESS
running