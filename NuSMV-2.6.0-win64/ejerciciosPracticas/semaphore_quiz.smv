MODULE main
VAR
    ch1 : process channel(); --- Channel question 1 to/from server
    ch2 : process channel(); --- Channel question 2 to/from server
    server : process server(turn,ch1.q2s,ch1.s2q,ch2.q2s,ch2.s2q);
    semaphore : boolean;
    turn : 1..2;
    question1 : process question(1, semaphore, turn);
    question2 : process question(2, semaphore, turn);
ASSIGN
    init(semaphore) := FALSE;
    init(turn) := 1;
SPEC
    AG !(question1.state = answering & question2.state = answering) ---safety
SPEC
    AG (question1.state = request -> AF question1.state = answering) ---liveness1
SPEC
    AG (question2.state = request -> AF question2.state = answering) ---liveness2

MODULE question(id,semaphore,turn)
VAR
    state : {noanswer,request,answering,a,b,c,d};
ASSIGN
    init(state) := noanswer;
    next(state) :=
        case
            state = noanswer : {noanswer,request};
            state = request & !semaphore & turn = id : answering;
            state = answering : {a,b,c,d};
            state = a : {a,request};
            state = b : {b,request};
            state = c : {c,request};
            state = d : {d,request};
            TRUE : state;
    esac;
    next(semaphore) :=
        case    
        state = request & !semaphore & turn = id : TRUE;
        state = answering : FALSE;
        TRUE : semaphore;
    esac;
    next(turn) := 
        case
            turn = 1 & id = 1 & state != request : 2;
            turn = 2 & id = 2 & state != request : 1;
            turn = 1 & semaphore = TRUE : 2;
            turn = 2 & semaphore = TRUE : 1;
            TRUE : turn; 
    esac;
FAIRNESS
running