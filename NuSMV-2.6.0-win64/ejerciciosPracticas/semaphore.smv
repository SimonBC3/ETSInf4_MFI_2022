MODULE main
VAR
    semaphore : boolean;
    proc1 : process user(semaphore);
    proc2 : process user(semaphore);
ASSIGN
    init(semaphore) := FALSE;
SPEC -- safety
    AG !(proc1.state = critical & proc2.state = critical)
SPEC -- liveness (proc1)
    AG (proc1.state = entering -> AF proc1.state = critical)
SPEC -- liveness (proc1)
    AG (proc2.state = entering -> AF proc2.state = critical)

MODULE user(semaphore)
VAR
    state : {idle,entering,critical,exiting};
ASSIGN
    init(state) := idle;
    next(state) :=
        case
            state = idle : {idle,entering};
            state = entering & !semaphore : critical;
            state = critical : exiting;
            state = exiting : idle;
            TRUE : state;
        esac;
    next(semaphore) :=
        case
            state = entering & !semaphore : TRUE;
            state = exiting : FALSE;
            TRUE : semaphore;
    esac;
FAIRNESS
running